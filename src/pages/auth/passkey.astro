--- 
import Layout from "../../layouts/Layout.astro"
// TODO: add styling, add error messages, abort the function if there is an error
---
<script>
  import { startRegistration, startAuthentication, browserSupportsWebAuthn } from '@simplewebauthn/browser';
  import { actions } from "astro:actions";
  
  const start_reg_elem = document.getElementById('btn_reg');
  const start_auth_elem = document.getElementById('btn_auth')

  const success_elem = document.getElementById('success');
  
  const error_elem = document.getElementById('error');
  const username_elem = document.getElementById('username') as HTMLInputElement;

  const supported = browserSupportsWebAuthn()
  if(!supported && error_elem) { error_elem.innerHTML = "Your browser doesn't support this method of authentication"} 
  if (supported && start_reg_elem && success_elem && error_elem && username_elem && start_auth_elem){
  // Start registration when the user clicks a button
  start_reg_elem.addEventListener('click', async () => {
    if(!username_elem.value) return
    // Reset success/error messages
    success_elem.innerHTML = '';
    error_elem.innerHTML = '';
    // GET registration options from the endpoint that calls
    // @simplewebauthn/server -> generateRegistrationOptions()
    const resp = await actions.getRegOpts({userName:username_elem.value});
    const optionsJSON = resp.data;
    if(optionsJSON?.error){
      return error_elem.innerText = optionsJSON?.error
    }
    let attResp;
    try {
      // Pass the options to the authenticator and wait for a response
      if (optionsJSON) attResp = await startRegistration({ optionsJSON })
      else throw new Error("No optionsJSON")
    } catch (error) {
      // Some basic error handling
      if (error.name === 'InvalidStateError') {
        error_elem.innerText = 'Error: Authenticator was probably already registered by user';
      } else {
	error_elem.innerText = JSON.stringify(error);
      }

      throw error;
    }
    // POST the response to the endpoint that calls
    // @simplewebauthn/server -> verifyRegistrationResponse()
    const verificationResp = await actions.verifyRegRes({response:attResp,userID:optionsJSON.user.id})

    // Wait for the results of verification
    const verification = verificationResp.data;

    // Show UI appropriate for the `verified` status
    if (verification) {
      success_elem.innerHTML = 'Success!';
    } else {
      error_elem.innerHTML = `Oh no, something went wrong! Response: <pre>${JSON.stringify(
        verification,
      )}</pre>`;
    }
    });
    start_auth_elem.addEventListener("click", async () => {
    const {options, userID} = (await actions.getAuthOpts({userName:username_elem.value})).data 
    let asseResp;
    try {
      // Pass the options to the authenticator and wait for a response
      asseResp = await startAuthentication({ optionsJSON:options });
    } catch (error) {
      // Some basic error handling
      error_elem.innerText = error;
      throw error;
      }
      await actions.verifyAuthRes({res:asseResp,userID}) 
      })
    }
</script>
  <Layout>
<p id="error"></p>
<p id="success"></p>
<input type="text" class="input" id="username"/>
<button id="btn_reg" class="btn">Register</button>
<button id="btn_auth" class="btn">Login</button>
  </Layout>
